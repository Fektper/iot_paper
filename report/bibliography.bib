@InProceedings{keystone_paper,
  author    = {Lee, Dayeol and Kohlbrenner, David and Shinde, Shweta and Asanovi\'{c}, Krste and Song, Dawn},
  booktitle = {Proceedings of the Fifteenth European Conference on Computer Systems},
  title     = {Keystone: an open framework for architecting trusted execution environments},
  year      = {2020},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  series    = {EuroSys '20},
  abstract  = {Trusted execution environments (TEEs) see rising use in devices from embedded sensors to cloud servers and encompass a range of cost, power constraints, and security threat model choices. On the other hand, each of the current vendor-specific TEEs makes a fixed set of trade-offs with little room for customization. We present Keystone---the first open-source framework for building customized TEEs. Keystone uses simple abstractions provided by the hardware such as memory isolation and a programmable layer underneath untrusted components (e.g., OS). We build reusable TEE core primitives from these abstractions while allowing platform-specific modifications and flexible feature choices. We showcase how Keystone-based TEEs run on unmodified RISC-V hardware and demonstrate the strengths of our design in terms of security, TCB size, execution of a range of benchmarks, applications, kernels, and deployment models.},
  articleno = {38},
  doi       = {10.1145/3342195.3387532},
  isbn      = {9781450368827},
  keywords  = {RISC-V, hardware enclave, hardware root of trust, memory isolation, open source, secure enclave, side-channel attack, trusted execution environment},
  location  = {Heraklion, Greece},
  numpages  = {16},
  url       = {https://doi.org/10.1145/3342195.3387532},
}

@InProceedings{sanctum_paper,
  author    = {Costan, Victor and Lebedev, Ilia and Devadas, Srinivas},
  booktitle = {Proceedings of the 25th USENIX Conference on Security Symposium},
  title     = {Sanctum: minimal hardware extensions for strong software isolation},
  year      = {2016},
  address   = {USA},
  pages     = {857–874},
  publisher = {USENIX Association},
  series    = {SEC'16},
  abstract  = {Sanctum offers the same promise as Intel's Software Guard Extensions (SGX), namely strong provable isolation of software modules running concurrently and sharing resources, but protects against an important class of additional software attacks that infer private information from a program's memory access patterns. Sanctum shuns unnecessary complexity, leading to a simpler security analysis. We follow a principled approach to eliminating entire attack surfaces through isolation, rather than plugging attack-specific privacy leaks. Most of Sanctum's logic is implemented in trusted software, which does not perform cryptographic operations using keys, and is easier to analyze than SGX's opaque microcode, which does.Our prototype targets a Rocket RISC-V core, an open implementation that allows any researcher to reason about its security properties. Sanctum's extensions can be adapted to other processor cores, because we do not change any major CPU building block. Instead, we add hardware at the interfaces between generic building blocks, without impacting cycle time.Sanctum demonstrates that strong software isolation is achievable with a surprisingly small set of minimally invasive hardware changes, and a very reasonable overhead.},
  isbn      = {9781931971324},
  location  = {Austin, TX, USA},
  numpages  = {18},
}

@InProceedings{multizone_arm,
  author    = {Pinto, Sandro and Garlati, Cesare},
  booktitle = {Embedded World Conference},
  title     = {Multi zone security for arm cortex-m devices},
  year      = {2020},
  volume    = {2020},
}

@Article{multizone_riscv,
  author  = {Garlati, Cesare and Pinto, Sandro},
  journal = {Embbedded world},
  title   = {Secure IoT Firmware For RISC-V Processors},
  year    = {2021},
  volume  = {2021},
}

@InProceedings{timber-v,
  author       = {Weiser, Samuel and Werner, Mario and Brasser, Ferdinand and Malenko, Maja and Mangard, Stefan and Sadeghi, Ahmad-Reza},
  booktitle    = {Proceedings 2019-Network and Distributed System Security Symposium (NDSS)},
  title        = {Timber-v: Tag-isolated memory bringing fine-grained enclaves to risc-v},
  year         = {2019},
  organization = {Internet Society},
}

@InProceedings{Roy2020,
  author    = {Nirjhar Roy and Nikhil Bansal and Gourav Takhar and Nikhil Mittal and Pramod Subramanyan},
  booktitle = {14th USENIX Workshop on Offensive Technologies (WOOT 20)},
  title     = {When Oblivious is Not: Attacks against {OPAM}},
  year      = {2020},
  month     = aug,
  publisher = {USENIX Association},
  url       = {https://www.usenix.org/conference/woot20/presentation/roy},
}

@Article{spectre_riscv,
  author   = {Anh-Tien Le and Trong-Thuc Hoang and Ba-Anh Dao and Akira Tsukamoto and Kuniyasu Suzaki and Cong-Kha Pham},
  journal  = {Computers and Electrical Engineering},
  title    = {A cross-process Spectre attack via cache on RISC-V processor with trusted execution environment},
  year     = {2023},
  issn     = {0045-7906},
  pages    = {108546},
  volume   = {105},
  abstract = {The trust execution environment (TEE) provides a safe region, also known as a secret enclave, for executing private programs that need protection. This work proposed a cross-process exploitation scheme for conducting the cache side-channel attack, Spectre, on RISC-V processors with a trust execution environment. Practical experiments are provided to verify the protected enclave’s security on RISC-V processors with the TEE. In these experiments, the attacker and victim do not share the same address space as in known implementations but are executed in separate processes. The experimental results show that initial leakage information from the cache memory can be recorded. To the best of our knowledge, no prior research has been conducted on the Spectre attack against RISC-V’s TEE. This implementation will be a critical component for extending further cache side-channel experiments on the security of RISC-V processors.},
  doi      = {https://doi.org/10.1016/j.compeleceng.2022.108546},
  keywords = {RISC-V, Spectre, Side-channel attack, Trusted execution environment, Cache memory, Secure enclave, Hybrid processor, Open source, Software, Security},
  url      = {https://www.sciencedirect.com/science/article/pii/S0045790622007613},
}

@InProceedings{sgxspectre,
  author    = {Chen, Guoxing and Chen, Sanchuan and Xiao, Yuan and Zhang, Yinqian and Lin, Zhiqiang and Lai, Ten H.},
  booktitle = {2019 IEEE European Symposium on Security and Privacy (EuroSP)},
  title     = {SgxPectre: Stealing Intel Secrets from SGX Enclaves Via Speculative Execution},
  year      = {2019},
  pages     = {142-157},
  doi       = {10.1109/EuroSP.2019.00020},
  keywords  = {Security;Registers;Seals;Out of order;Hardware;SGX;side channel;speculative execution},
}

@InProceedings{plundervolt,
  author    = {Murdock, Kit and Oswald, David and Garcia, Flavio D. and Van Bulck, Jo and Gruss, Daniel and Piessens, Frank},
  booktitle = {2020 IEEE Symposium on Security and Privacy (SP)},
  title     = {Plundervolt: Software-based Fault Injection Attacks against Intel SGX},
  year      = {2020},
  pages     = {1466-1482},
  doi       = {10.1109/SP40000.2020.00057},
  keywords  = {Program processors;Voltage control;Cryptography;Clocks;Regulators},
}

@Article{intelsgx,
  author  = {Victor Costan and Srinivas Devadas},
  journal = {IACR Cryptol. ePrint Arch.},
  title   = {Intel SGX Explained},
  year    = {2016},
  pages   = {86},
  volume  = {2016},
  url     = {https://api.semanticscholar.org/CorpusID:28642809},
}

@Article{trustzone_demist,
  author     = {Pinto, Sandro and Santos, Nuno},
  journal    = {ACM Comput. Surv.},
  title      = {Demystifying Arm TrustZone: A Comprehensive Survey},
  year       = {2019},
  issn       = {0360-0300},
  month      = jan,
  number     = {6},
  volume     = {51},
  abstract   = {The world is undergoing an unprecedented technological transformation, evolving into a state where ubiquitous Internet-enabled “things” will be able to generate and share large amounts of security- and privacy-sensitive data. To cope with the security threats that are thus foreseeable, system designers can find in Arm TrustZone hardware technology a most valuable resource. TrustZone is a System-on-Chip and CPU system-wide security solution, available on today’s Arm application processors and present in the new generation Arm microcontrollers, which are expected to dominate the market of smart “things.” Although this technology has remained relatively underground since its inception in 2004, over the past years, numerous initiatives have significantly advanced the state of the art involving Arm TrustZone. Motivated by this revival of interest, this paper presents an in-depth study of TrustZone technology. We provide a comprehensive survey of relevant work from academia and industry, presenting existing systems into two main areas, namely, Trusted Execution Environments and hardware-assisted virtualization. Furthermore, we analyze the most relevant weaknesses of existing systems and propose new research directions within the realm of tiniest devices and the Internet of Things, which we believe to have potential to yield high-impact contributions in the future.},
  address    = {New York, NY, USA},
  articleno  = {130},
  doi        = {10.1145/3291047},
  issue_date = {November 2019},
  keywords   = {Arm, TEE, TrustZone, security, survey, virtualization},
  numpages   = {36},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/3291047},
}

@InProceedings{Shepherd2016,
  author    = {Shepherd, Carlton and Arfaoui, Ghada and Gurulian, Iakovos and Lee, Robert P. and Markantonakis, Konstantinos and Akram, Raja Naeem and Sauveron, Damien and Conchon, Emmanuel},
  booktitle = {2016 IEEE Trustcom/BigDataSE/ISPA},
  title     = {Secure and Trusted Execution: Past, Present, and Future - A Critical Review in the Context of the Internet of Things and Cyber-Physical Systems},
  year      = {2016},
  pages     = {168-177},
  doi       = {10.1109/TrustCom.2016.0060},
  keywords  = {Trust;Trustworthiness;Trusted Computing;Trusted Platform Module;Trusted Execution Environment;GlobalPlatform;Java Card;Intel SGX;Host Card Emulation;Encrypted Execution Environment;Internet of Things;Cyber-Physical System},
}

@InProceedings{tee_whatitis,
  author    = {Sabt, Mohamed and Achemlal, Mohammed and Bouabdallah, Abdelmadjid},
  booktitle = {2015 IEEE Trustcom/BigDataSE/ISPA},
  title     = {Trusted Execution Environment: What It is, and What It is Not},
  year      = {2015},
  pages     = {57-64},
  volume    = {1},
  doi       = {10.1109/Trustcom.2015.357},
  keywords  = {Security;Kernel;Hardware;Runtime;Secure storage;Context;survey;TEE;TrustZone;DRTM;secure boot;secure scheduling;trusted UI},
}

@Article{survey_insecuritys,
  author   = {Antonio Muñoz and Ruben Ríos and Rodrigo Román and Javier López},
  journal  = {Computers \& Security},
  title    = {A survey on the (in)security of trusted execution environments},
  year     = {2023},
  issn     = {0167-4048},
  pages    = {103180},
  volume   = {129},
  abstract = {As the number of security and privacy attacks continue to grow around the world, there is an ever increasing need to protect our personal devices. As a matter of fact, more and more manufactures are relying on Trusted Execution Environments (TEEs) to shield their devices. In particular, ARM TrustZone (TZ) is being widely used in numerous embedded devices, especially smartphones, and this technology is the basis for secure solutions both in industry and academia. However, as shown in this paper, TEE is not bullet-proof and it has been successfully attacked numerous times and in very different ways. To raise awareness among potential stakeholders interested in this technology, this paper provides an extensive analysis and categorization of existing vulnerabilities in TEEs and highlights the design flaws that led to them. The presented vulnerabilities, which are not only extracted from existing literature but also from publicly available exploits and databases, are accompanied by some effective countermeasures to reduce the likelihood of new attacks. The paper ends with some appealing challenges and open issues.},
  doi      = {https://doi.org/10.1016/j.cose.2023.103180},
  keywords = {Computer security, Secure hardware, Trusted execution environments, Hardware attacks, Software attacks, Side-channel attacks},
  url      = {https://www.sciencedirect.com/science/article/pii/S0167404823000901},
}

@Article{IIoTEED,
  author   = {Pinto, Sandro and Gomes, Tiago and Pereira, Jorge and Cabral, Jorge and Tavares, Adriano},
  journal  = {IEEE Internet Computing},
  title    = {IIoTEED: An Enhanced, Trusted Execution Environment for Industrial IoT Edge Devices},
  year     = {2017},
  number   = {1},
  pages    = {40--47},
  volume   = {21},
  doi      = {10.1109/MIC.2017.17},
  keywords = {Internet of things;Web services;Trust management;Network security;Smart devices;Internet/Web technologies;trusted execution environment;Internet of Things;industrial Internet of Things;TrustZone;security;edge device;smart industries;ARM},
}

@InProceedings{sancus,
  author    = {Job Noorman and Pieter Agten and Wilfried Daniels and Raoul Strackx and Anthony Van Herrewege and Christophe Huygens and Bart Preneel and Ingrid Verbauwhede and Frank Piessens},
  booktitle = {22nd USENIX Security Symposium (USENIX Security 13)},
  title     = {Sancus: Low-cost Trustworthy Extensible Networked Devices with a Zero-software Trusted Computing Base},
  year      = {2013},
  address   = {Washington, D.C.},
  month     = aug,
  pages     = {479--498},
  publisher = {USENIX Association},
  isbn      = {978-1-931971-03-4},
  url       = {https://www.usenix.org/conference/usenixsecurity13/technical-sessions/presentation/noorman},
}

@InProceedings{Buchner2022,
  author    = {Buchner, Nicolas and Kinkelin, Holger and Rezabek, Filip},
  booktitle = {Seminar IITM WS 21},
  title     = {Survey on trusted execution environments},
  year      = {2022},
  volume    = {22},
}

@InProceedings{fortress,
  author    = {Yuhala, Peterson and M\'{e}n\'{e}trey, J\"{a}mes and Felber, Pascal and Pasin, Marcelo and Schiavoni, Valerio},
  booktitle = {Proceedings of the 39th ACM/SIGAPP Symposium on Applied Computing},
  title     = {Fortress: Securing IoT Peripherals with Trusted Execution Environments},
  year      = {2024},
  address   = {New York, NY, USA},
  pages     = {243–250},
  publisher = {Association for Computing Machinery},
  series    = {SAC '24},
  abstract  = {With the increasing popularity of Internet of Things (IoT) devices, securing sensitive user data has emerged as a major challenge. These devices often collect confidential information, such as audio and visual data, through peripheral inputs like microphones and cameras. Such sensitive information is then exposed to potential threats, either from malicious software with high-level access rights or transmitted (sometimes inadvertently) to untrusted cloud services. In this paper, we propose a generic design to enhance the privacy in IoT-based systems by isolating peripheral I/O memory regions in a secure kernel space of a trusted execution environment (TEE). Only a minimal set of peripheral driver code, resident within the secure kernel, can access this protected memory area.This design effectively restricts any unauthorised access by system software, including the operating system and hypervisor. The sensitive peripheral data is then securely transferred to a user-space TEE, where obfuscation mechanisms can be applied before it is relayed to third parties, e.g., the cloud. To validate our architectural approach, we provide a proof-of-concept implementation of our design by securing an audio peripheral based on inter-IC sound (I2S), a serial bus to interconnect audio devices. The experimental results show that our design offers a robust security solution with an acceptable computational overhead.},
  doi       = {10.1145/3605098.3635994},
  isbn      = {9798400702433},
  keywords  = {confidential computing, trusted execution environments, ARM TrustZone, OP-TEE, kernel drivers, IoT, secure peripherals, edge computing},
  location  = {Avila, Spain},
  numpages  = {8},
  url       = {https://doi.org/10.1145/3605098.3635994},
}

@Article{Maene2018,
  author   = {Maene, Pieter and Götzfried, Johannes and de Clercq, Ruan and Müller, Tilo and Freiling, Felix and Verbauwhede, Ingrid},
  journal  = {IEEE Transactions on Computers},
  title    = {Hardware-Based Trusted Computing Architectures for Isolation and Attestation},
  year     = {2018},
  number   = {3},
  pages    = {361-374},
  volume   = {67},
  doi      = {10.1109/TC.2017.2647955},
  keywords = {Computer architecture;Software;Hardware;Software measurement;Encryption;Computers;Trusted computing;security hardware;protected module architectures;isolation;attestation},
}

@InProceedings{tee_fraunhofer,
  author    = {Auer, Lukas and Skubich, Christian and Hiller, Matthias},
  booktitle = {2019 Design, Automation and Test in Europe Conference and Exhibition (DATE)},
  title     = {A Security Architecture for RISC-V based IoT Devices},
  year      = {2019},
  pages     = {1154-1159},
  doi       = {10.23919/DATE.2019.8714822},
  keywords  = {Software;Internet of Things;Cryptography;Hardware;Monitoring;Automation;RISC-V;device security;secure boot;watchdog timer;IoT},
}

@InProceedings{Lebedev2018,
  author    = {Lebedev, Ilia and Hogan, Kyle and Devadas, Srinivas},
  booktitle = {2018 IEEE 31st Computer Security Foundations Symposium (CSF)},
  title     = {Invited Paper: Secure Boot and Remote Attestation in the Sanctum Processor},
  year      = {2018},
  pages     = {46-60},
  doi       = {10.1109/CSF.2018.00011},
  keywords  = {Hardware;Public key;Error correction;Software;Silicon;secure-boot;remote-attestation;secure-processor;puf},
}

@Article{Valadares2021,
  author   = {Valadares, Dalton Cézane Gomes and Will, Newton Carlos and Caminha, Jean and Perkusich, Mirko Barbosa and Perkusich, Angelo and Gorgônio, Kyller Costa},
  journal  = {IEEE Access},
  title    = {Systematic Literature Review on the Use of Trusted Execution Environments to Protect Cloud/Fog-Based Internet of Things Applications},
  year     = {2021},
  pages    = {80953-80969},
  volume   = {9},
  doi      = {10.1109/ACCESS.2021.3085524},
  keywords = {Internet of Things;Software;Data protection;Servers;Protocols;Privacy;Cloud computing;Trusted computing;Internet of Things;trusted execution environments;data security;Intel SGX;ARM TrustZone},
}

@InProceedings{MyTEE,
  author    = {Han, Seung-Kyun and Jang, Jinsoo},
  booktitle = {NDSS},
  title     = {MyTEE: Own the Trusted Execution Environment on Embedded Devices.},
  year      = {2023},
}

@InProceedings{Komodo,
  author    = {Ferraiuolo, Andrew and Baumann, Andrew and Hawblitzel, Chris and Parno, Bryan},
  booktitle = {Proceedings of the 26th Symposium on Operating Systems Principles},
  title     = {Komodo: Using verification to disentangle secure-enclave hardware from software},
  year      = {2017},
  address   = {New York, NY, USA},
  pages     = {287–305},
  publisher = {Association for Computing Machinery},
  series    = {SOSP '17},
  abstract  = {Intel SGX promises powerful security: an arbitrary number of user-mode enclaves protected against physical attacks and privileged software adversaries. However, to achieve this, Intel extended the x86 architecture with an isolation mechanism approaching the complexity of an OS microkernel, implemented by an inscrutable mix of silicon and microcode. While hardware-based security can offer performance and features that are difficult or impossible to achieve in pure software, hardware-only solutions are difficult to update, either to patch security flaws or introduce new features.Komodo illustrates an alternative approach to attested, on-demand, user-mode, concurrent isolated execution. We decouple the core hardware mechanisms such as memory encryption, address-space isolation and attestation from the management thereof, which Komodo delegates to a privileged software monitor that in turn implements enclaves. The monitor's correctness is ensured by a machine-checkable proof of both functional correctness and high-level security properties of enclave integrity and confidentiality. We show that the approach is practical and performant with a concrete implementation of a prototype in verified assembly code on ARM TrustZone. Our ultimate goal is to achieve security equivalent to or better than SGX while enabling deployment of new enclave features independently of CPU upgrades.The Komodo specification, prototype implementation, and proofs are available at https://github.com/Microsoft/Komodo.},
  doi       = {10.1145/3132747.3132782},
  isbn      = {9781450350853},
  location  = {Shanghai, China},
  numpages  = {19},
  url       = {https://doi.org/10.1145/3132747.3132782},
}

@InProceedings{optee_notrealpaper,
  author       = {G{\"o}ttel, Christian and Felber, Pascal and Schiavoni, Valerio},
  booktitle    = {Distributed Applications and Interoperable Systems: 19th IFIP WG 6.1 International Conference, DAIS 2019, Held as Part of the 14th International Federated Conference on Distributed Computing Techniques, DisCoTec 2019, Kongens Lyngby, Denmark, June 17--21, 2019, Proceedings 19},
  title        = {Developing secure services for IoT with OP-TEE: a first look at performance and usability},
  year         = {2019},
  organization = {Springer},
  pages        = {170--178},
}

@Comment{jabref-meta: databaseType:bibtex;}
